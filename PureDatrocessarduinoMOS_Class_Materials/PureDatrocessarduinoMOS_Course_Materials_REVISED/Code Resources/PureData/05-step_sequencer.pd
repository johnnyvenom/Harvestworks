#N canvas -8 -8 1024 725 10;
#N canvas 374 204 903 324 serial_port 1;
#X msg 190 178 close;
#X obj 190 156 loadbang;
#X obj 190 222 print Arduino_Says:;
#X obj 231 178 r to_serial;
#X obj 102 102 tgl 14 0 empty empty open_serial_port 17 6 0 10 -262144
-1 -1 1 1;
#X msg 142 222 set 1;
#X msg 102 222 set 0;
#X obj 142 141 sel 1 0;
#X text 284 199 creation arguments: <port#> <BAUD>;
#X text 312 221 if you gave the arduino something to say it appears
in the console;
#X text 304 178 send things to the serial port via "to_serial" send
symbol;
#X floatatom 103 121 5 0 0 1 serial_out to_serial -;
#X msg 142 178 open 2;
#X obj 190 200 comport 2 9600;
#X connect 0 0 6 0;
#X connect 0 0 13 0;
#X connect 1 0 0 0;
#X connect 3 0 13 0;
#X connect 4 0 7 0;
#X connect 5 0 4 0;
#X connect 6 0 4 0;
#X connect 7 0 12 0;
#X connect 7 1 0 0;
#X connect 12 0 5 0;
#X connect 12 0 13 0;
#X connect 13 0 2 0;
#X coords 0 -1 1 1 130 40 2 100 100;
#X restore -55 -65 pd serial_port;
#X obj -57 31 serial_sequencer;
#X text 79 -65 Activate toggle to enable serial connection to Arduino
;
#X text -58 -26 This patch is called from the serial_sequencer.pd patch.
Open it up and see how it works! It's possible to create a pretty powerful
step sequencer using only a few objects in PD. Have fun!;
